#pragma once

#include <array>
#include <string>
#include "ncurses.h"

#include "IKeyboardInputObserver.hpp"
#include "PlayerCharacter.hpp"
#include "Window.hpp"
#include "Tile.hpp"

class PlayerController : public IKeyboardInputObserver {
public:
    PlayerController(Window& window) :
        _window{window},
        _map{stringToMap(MAP)}
    {
        _window.redrawMap(PlayerCharacter {0, 0}, stringToMap(MAP));
    }

    void onKeyPressed(int ch) override {
        unsigned newY = y;
        unsigned newX = x;
        switch ( ch ) {

        case KEY_UP:
            --newY;
            break;

        case KEY_DOWN:
            ++newY;
            break;

        case KEY_LEFT:
            --newX;
            break;

        case KEY_RIGHT:
            ++newX;
            break;
        }

        if(newX >= 0 and newX < cols and newY >= 0 and newY < rows and _map[newY][newX] != Tile::Wall)
        {
            x = newX;
            y = newY;
        }


        _window.redrawMap(PlayerCharacter {x, y}, _map);
    }

private:
    Window& _window;
    const unsigned rows  = 25;
    const unsigned cols   = 80;
    unsigned x = 0;
    unsigned y = 0;

    const std::array<std::string, 25> MAP {
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................######..........................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................",
        "................................................................................"
    };

    std::array<std::array<Tile, 80>, 25> _map;

    std::array<std::array<Tile, 80>, 25> stringToMap(const std::array<std::string, 25>& rawMap) {
        std::array<std::array<Tile, 80>, 25> map {};
        for(std::size_t posY = 0; posY < 25; ++posY) {
            for(std::size_t posX = 0; posX < 80; ++posX) {
                if (rawMap[posY][posX] == '.')
                    map[posY][posX] = Tile::Dirt;
                if (rawMap[posY][posX] == '#')
                    map[posY][posX] = Tile::Wall;
            }
        }

        return map;
    }
};